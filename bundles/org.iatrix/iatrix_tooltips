# HG changeset patch
# User Niklaus Giger <niklaus.giger@member.fsf.org>
# Date 1380878216 -7200
# Branch 2.1.7
# Node ID 94a845861ccaa7e9965a3b88a7f75551e1b490e1
# Parent  c5597553b791f1ebd6b1613f67f276ab567d54e6
New tooltips. Added sticker. Remarks with default text and yellow background. Actions more visible and some new icons.

diff --git a/org.iatrix/CHANGES b/org.iatrix/CHANGES
--- a/org.iatrix/CHANGES
+++ b/org.iatrix/CHANGES
@@ -1,3 +1,7 @@
+2013-10-04 Niklaus Giger
+  * Added icon folder.png from KDE oxygen theme to rsc
+  * Used icons for toolbar  
+  
 2013-09-19 Niklaus Giger
   * New Action send Email
   
diff --git a/org.iatrix/META-INF/MANIFEST.MF b/org.iatrix/META-INF/MANIFEST.MF
--- a/org.iatrix/META-INF/MANIFEST.MF
+++ b/org.iatrix/META-INF/MANIFEST.MF
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Iatrix Erweiterungen zu Elexis
 Bundle-SymbolicName: org.iatrix; singleton:=true
-Bundle-Version: 2.0.2
+Bundle-Version: 2.0.3
 Bundle-Localization: plugin
 Require-Bundle: ch.elexis.core;bundle-version="0.0.2",
  org.eclipse.ui,
diff --git a/org.iatrix/rsc/folder.png b/org.iatrix/rsc/folder.png
new file mode 100644
index 0000000000000000000000000000000000000000..e79a1b5153261f841567c1fcf76567a5291ea93b
GIT binary patch
literal 2403
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
R#qbaTLH-B)8oy+o`#+3riLU?v

diff --git a/org.iatrix/src/org/iatrix/views/JournalView.java b/org.iatrix/src/org/iatrix/views/JournalView.java
--- a/org.iatrix/src/org/iatrix/views/JournalView.java
+++ b/org.iatrix/src/org/iatrix/views/JournalView.java
@@ -30,6 +30,7 @@
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.viewers.CheckStateChangedEvent;
 import org.eclipse.jface.viewers.CheckboxTableViewer;
@@ -113,6 +114,7 @@
 import ch.elexis.actions.Heartbeat.HeartListener;
 import ch.elexis.actions.ICodeSelectorTarget;
 import ch.elexis.admin.AccessControlDefaults;
+import ch.elexis.core.data.ISticker;
 import ch.elexis.data.Anschrift;
 import ch.elexis.data.Anwender;
 import ch.elexis.data.Artikel;
@@ -124,11 +126,13 @@
 import ch.elexis.data.Patient;
 import ch.elexis.data.PersistentObject;
 import ch.elexis.data.PersistentObjectFactory;
+import ch.elexis.data.Person;
 import ch.elexis.data.Prescription;
 import ch.elexis.data.Query;
 import ch.elexis.data.Rechnung;
 import ch.elexis.data.Rechnungssteller;
 import ch.elexis.data.RnStatus;
+import ch.elexis.data.Sticker;
 import ch.elexis.data.Verrechnet;
 import ch.elexis.dialogs.KontaktSelektor;
 import ch.elexis.dialogs.MediDetailDialog;
@@ -227,6 +231,8 @@
 	
 	private Hyperlink formTitel;
 	private Label remarkLabel;
+	private Label stickerLabel;
+	private Image sticker;
 	private Label kontoLabel;
 	private Color kontoLabelColor; // original color of kontoLabel
 	
@@ -265,11 +271,21 @@
 		"Code", // DIAGNOSEN
 		/*
 		 * "Fall", // GESETZ
-		 */
-
-		"" // STATUS
+		 */		
+		""
 	};
 	
+	private static final String[] TOOLTIP_TEXT = {
+		"Was soll niklaus hier schreiben (row 0)",
+		"Datum/Dauer des Ereignis, z.B. 2013-12-30, 1999-11, 1988, 1988-2010", // DATUM
+		"Nummer des Ereignis", // NUMMER
+		"Geschildertes Problem, Diagnose", // BEZEICHNUNG
+		"Therapie, Medikation", // THERAPIE
+		"Was soll niklaus hier schreiben (row 5)",
+		"Was soll niklaus hier schreiben (row 6)",
+		"Was soll niklaus hier schreiben (row 7)",
+		};
+	
 	private static final int[] DEFAULT_COLUMN_WIDTH = {
 		80, // DATUM
 		30, // NUMMER
@@ -293,7 +309,7 @@
 		/*
 		 * CFG_BASE_KEY + "/" + "law", // GESETZ
 		 */
-
+		
 		CFG_BASE_KEY + "/" + "status", // STATUS
 	};
 	
@@ -317,7 +333,7 @@
 	
 	/* Konsultation */
 	private IAction addKonsultationAction;
-
+	
 	/* problemsTableViewer */
 	private IAction addProblemAction;
 	private IAction delProblemAction;
@@ -369,91 +385,90 @@
 		}
 	}
 	
-	private final ElexisEventListenerImpl eeli_problem =
-		new ElexisEventListenerImpl(Episode.class, EVENT_UPDATE | EVENT_DESELECTED) {
-			
-			@Override
-			public void runInUi(ElexisEvent ev){
-				switch (ev.getType()) {
-				case EVENT_UPDATE:
-					// problem change may affect current problems list and consultation
-					// TODO check if problem is part of current consultation
-					// work-around: just update the current patient and consultation
-					setPatient(actPatient);
+	private final ElexisEventListenerImpl eeli_problem = new ElexisEventListenerImpl(Episode.class,
+		EVENT_UPDATE | EVENT_DESELECTED) {
+		
+		@Override
+		public void runInUi(ElexisEvent ev){
+			switch (ev.getType()) {
+			case EVENT_UPDATE:
+				// problem change may affect current problems list and consultation
+				// TODO check if problem is part of current consultation
+				// work-around: just update the current patient and consultation
+				setPatient(actPatient);
+				updateKonsultation(!konsEditorHasFocus, false);
+				break;
+			case EVENT_DESELECTED:
+				problemsKTable.clearSelection();
+				break;
+			}
+			
+		}
+	};
+	
+	private final ElexisEventListenerImpl eeli_kons = new ElexisEventListenerImpl(
+		Konsultation.class, EVENT_DELETE | EVENT_UPDATE | EVENT_SELECTED | EVENT_DESELECTED) {
+		
+		@Override
+		public void runInUi(ElexisEvent ev){
+			Konsultation k = (Konsultation) ev.getObject();
+			switch (ev.getType()) {
+			case EVENT_UPDATE:
+				if (actKons != null && k.getId().equals(actKons.getId())) {
 					updateKonsultation(!konsEditorHasFocus, false);
-					break;
-				case EVENT_DESELECTED:
-					problemsKTable.clearSelection();
-					break;
 				}
 				
+				break;
+			case EVENT_DELETE:
+				if (actKons != null && k.getId().equals(actKons.getId())) {
+					setKonsultation(null, false);
+				}
+				break;
+			case EVENT_SELECTED:
+				Patient patient = k.getFall().getPatient();
+				setPatient(patient);
+				setKonsultation(k, true);
+				break;
+			case EVENT_DESELECTED:
+				setKonsultation(null, true);
+				break;
 			}
-		};
+			
+		}
+		
+	};
 	
-	private final ElexisEventListenerImpl eeli_kons =
-		new ElexisEventListenerImpl(Konsultation.class, EVENT_DELETE | EVENT_UPDATE
-			| EVENT_SELECTED | EVENT_DESELECTED) {
-			
-			@Override
-			public void runInUi(ElexisEvent ev){
-				Konsultation k = (Konsultation) ev.getObject();
-				switch (ev.getType()) {
-				case EVENT_UPDATE:
-					if (actKons != null && k.getId().equals(actKons.getId())) {
-						updateKonsultation(!konsEditorHasFocus, false);
-					}
+	private final ElexisEventListenerImpl eeli_fall = new ElexisEventListenerImpl(Fall.class,
+		ElexisEvent.EVENT_SELECTED) {
+		@Override
+		public void runInUi(ElexisEvent ev){
+			Fall fall = (Fall) ev.getObject();
+			Patient patient = fall.getPatient();
+			
+			// falls aktuell ausgewaehlte Konsulation zu diesem Fall
+			// gehoert,
+			// diese setzen
+			Konsultation konsulation =
+				(Konsultation) ElexisEventDispatcher.getSelected(Konsultation.class);
+			if (konsulation != null) {
+				if (konsulation.getFall().getId().equals(fall.getId())) {
+					// diese Konsulation gehoert zu diesem Patienten
 					
-					break;
-				case EVENT_DELETE:
-					if (actKons != null && k.getId().equals(actKons.getId())) {
-						setKonsultation(null, false);
-					}
-					break;
-				case EVENT_SELECTED:
-					Patient patient = k.getFall().getPatient();
 					setPatient(patient);
-					setKonsultation(k, true);
-					break;
-				case EVENT_DESELECTED:
-					setKonsultation(null, true);
-					break;
+					setKonsultation(konsulation, true);
+					
+					return;
 				}
-				
 			}
 			
-		};
-	
-	private final ElexisEventListenerImpl eeli_fall =
-		new ElexisEventListenerImpl(Fall.class, ElexisEvent.EVENT_SELECTED) {
-			@Override
-			public void runInUi(ElexisEvent ev){
-				Fall fall = (Fall) ev.getObject();
-				Patient patient = fall.getPatient();
-				
-				// falls aktuell ausgewaehlte Konsulation zu diesem Fall
-				// gehoert,
-				// diese setzen
-				Konsultation konsulation =
-					(Konsultation) ElexisEventDispatcher.getSelected(Konsultation.class);
-				if (konsulation != null) {
-					if (konsulation.getFall().getId().equals(fall.getId())) {
-						// diese Konsulation gehoert zu diesem Patienten
-						
-						setPatient(patient);
-						setKonsultation(konsulation, true);
-						
-						return;
-					}
-				}
-				
-				// sonst die aktuellste Konsulation des Falls setzen
-				konsulation = getTodaysLatestKons(fall);
-				
-				setPatient(patient);
-				setKonsultation(konsulation, true);
-				
-			}
-		};
+			// sonst die aktuellste Konsulation des Falls setzen
+			konsulation = getTodaysLatestKons(fall);
+			
+			setPatient(patient);
+			setKonsultation(konsulation, true);
+			
+		}
+	};
 	private final ElexisEventListenerImpl eeli_pat = new ElexisEventListenerImpl(Patient.class) {
 		
 		@Override
@@ -522,14 +537,14 @@
 		
 	};
 	
-	private final ElexisEventListenerImpl eeli_user =
-		new ElexisEventListenerImpl(Anwender.class, ElexisEvent.EVENT_USER_CHANGED) {
-			@Override
-			public void runInUi(ElexisEvent ev){
-				adaptMenus();
-			}
-			
-		};
+	private final ElexisEventListenerImpl eeli_user = new ElexisEventListenerImpl(Anwender.class,
+		ElexisEvent.EVENT_USER_CHANGED) {
+		@Override
+		public void runInUi(ElexisEvent ev){
+			adaptMenus();
+		}
+		
+	};
 	
 	@Override
 	public void createPartControl(Composite parent){
@@ -646,8 +661,9 @@
 										getViewSite().getPage().showView(JournalView.ID);
 									} catch (Exception ex) {
 										ExHandler.handle(ex);
-										log.log("Fehler beim Öffnen von JournalView: "
-											+ ex.getMessage(), Log.ERRORS);
+										log.log(
+											"Fehler beim Öffnen von JournalView: "
+												+ ex.getMessage(), Log.ERRORS);
 									}
 								}
 							}
@@ -703,16 +719,37 @@
 			}
 		});
 		
-		remarkLabel = tk.createLabel(formHeader, "");
+		Composite patInfoArea = tk.createComposite(formHeader);
 		gd = SWTHelper.getFillGridData(1, true, 1, false);
+		patInfoArea.setLayoutData(gd);
+		GridLayout infoLayout = new GridLayout(2, false);
+		// save space
+		infoLayout.horizontalSpacing = 5;
+		infoLayout.verticalSpacing = 0;
+		infoLayout.marginWidth = 0;
+		infoLayout.marginHeight = 0;
+		patInfoArea.setLayout(infoLayout);
+		
+		remarkLabel = tk.createLabel(patInfoArea, "");
+		gd = new GridData(SWT.LEFT, SWT.TOP, false, false);
 		remarkLabel.setLayoutData(gd);
-		
+		remarkLabel.setBackground(patInfoArea.getDisplay().getSystemColor(SWT.COLOR_YELLOW));
+		
+		remarkLabel.setToolTipText("Bemerkung kann via Doppelclick geändert werden");
 		remarkLabel.addMouseListener(new MouseAdapter() {
 			public void mouseDoubleClick(MouseEvent e){
 				openRemarkEditorDialog();
 			}
 		});
 		
+		stickerLabel = tk.createLabel(patInfoArea, "");
+		gd = SWTHelper.getFillGridData(1, true, 1, false);
+		sticker = Desk.getImage(Desk.IMG_MANN);
+		stickerLabel.setImage(sticker);
+		stickerLabel.setLayoutData(gd);
+		stickerLabel.setToolTipText("Sticker des Patienten");
+		stickerLabel.setLayoutData(gd);
+		
 		Composite kontoArea = tk.createComposite(formHeader);
 		gd = new GridData(SWT.END, SWT.CENTER, true, false);
 		kontoArea.setLayoutData(gd);
@@ -789,15 +826,20 @@
 		menus = new ViewMenus(getViewSite());
 		if (Hub.acl.request(AccessControlDefaults.AC_PURGE)) {
 			menus.createMenu(addKonsultationAction, GlobalActions.redateAction, addProblemAction,
-				GlobalActions.delKonsAction, delProblemAction, exportToClipboardAction, sendEmailAction,
-				versionFwdAction, versionBackAction, chooseVersionAction, purgeAction, saveAction);
+				GlobalActions.delKonsAction, delProblemAction, exportToClipboardAction,
+				sendEmailAction, versionFwdAction, versionBackAction, chooseVersionAction,
+				purgeAction, saveAction, showAllConsultationsAction, showAllChargesAction,
+				addFixmedikationAction);
 		} else {
 			menus.createMenu(addKonsultationAction, GlobalActions.redateAction, addProblemAction,
-				GlobalActions.delKonsAction, delProblemAction, exportToClipboardAction, sendEmailAction,
-				versionFwdAction, versionBackAction, chooseVersionAction, saveAction);
+				GlobalActions.delKonsAction, delProblemAction, exportToClipboardAction,
+				sendEmailAction, versionFwdAction, versionBackAction, chooseVersionAction,
+				saveAction, showAllConsultationsAction, showAllChargesAction,
+				addFixmedikationAction);
 		}
 		
-		menus.createToolbar(addKonsultationAction, addProblemAction, saveAction);
+		menus.createToolbar(sendEmailAction, exportToClipboardAction, addKonsultationAction,
+			addProblemAction, saveAction);
 		menus.createControlContextMenu(problemsKTable, addFixmedikationAction,
 			editFixmedikationAction, deleteFixmedikationAction);
 		menus.createViewerContextMenu(problemAssignmentViewer, unassignProblemAction);
@@ -894,8 +936,9 @@
 											problemDiagnosesCodeSelectorTarget);
 									} catch (Exception ex) {
 										ExHandler.handle(ex);
-										log.log("Fehler beim Starten des Diagnosencodes "
-											+ ex.getMessage(), Log.ERRORS);
+										log.log(
+											"Fehler beim Starten des Diagnosencodes "
+												+ ex.getMessage(), Log.ERRORS);
 									}
 								}
 								break;
@@ -994,7 +1037,7 @@
 			}
 			
 			public void fixedCellDoubleClicked(int col, int row, int statemask){
-			// nothing to do
+				// nothing to do
 			}
 		});
 		/*
@@ -1095,7 +1138,7 @@
 		 * ExHandler.handle(ex); log.log("Fehler beim Öffnen von ProblemView: " + ex.getMessage(),
 		 * Log.ERRORS); } } });
 		 */
-
+		
 		// Drag'n'Drop support
 		// Quelle
 		DragSource ds = new DragSource(problemsKTable, DND.DROP_COPY);
@@ -1145,15 +1188,15 @@
 			
 			/* Mausbewegungen mit gedrückter Taste sind uns egal */
 			public void dragLeave(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOperationChanged(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOver(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			/* Erst das Loslassen interessiert uns wieder */
@@ -1168,7 +1211,7 @@
 			}
 			
 			public void dropAccept(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 		});
 	}
@@ -1188,7 +1231,7 @@
 		 * //lKonsultation.setLayoutData(SWTHelper.getFillGridData(1, true, 1, false));
 		 * lKonsultation.setFont(JFaceResources.getHeaderFont());
 		 */
-
+		
 		hlKonsultationDatum = tk.createHyperlink(konsFallArea, "", SWT.NONE);
 		hlKonsultationDatum.setFont(JFaceResources.getHeaderFont());
 		hlKonsultationDatum.addHyperlinkListener(new HyperlinkAdapter() {
@@ -1284,7 +1327,7 @@
 				 * .getProblemsOfKonsultation(actKons); return problems.toArray(); } return new
 				 * Problem[0];
 				 */
-
+				
 				if (actKons != null) {
 					// get all problems of the current patient
 					List<Problem> patientProblems =
@@ -1317,11 +1360,11 @@
 			}
 			
 			public void dispose(){
-			// nothing to do
+				// nothing to do
 			}
 			
 			public void inputChanged(Viewer viewer, Object oldInput, Object newInput){
-			// nothing to do
+				// nothing to do
 			}
 		});
 		problemAssignmentViewer.setLabelProvider(new ProblemAssignmentLabelProvider());
@@ -1435,9 +1478,7 @@
 						konsultationVerrechnungCodeSelectorTarget);
 				} catch (Exception ex) {
 					ExHandler.handle(ex);
-					log
-						.log("Fehler beim Starten des Leistungscodes " + ex.getMessage(),
-							Log.ERRORS);
+					log.log("Fehler beim Starten des Leistungscodes " + ex.getMessage(), Log.ERRORS);
 				}
 			}
 		});
@@ -1479,11 +1520,11 @@
 			}
 			
 			public void dispose(){
-			// nothing to do
+				// nothing to do
 			}
 			
 			public void inputChanged(Viewer viewer, Object oldInput, Object newInput){
-			// nothing to do
+				// nothing to do
 			}
 		});
 		verrechnungViewer.setLabelProvider(new LabelProvider() {
@@ -1497,8 +1538,8 @@
 				int z = verrechnet.getZahl();
 				Money preis = new Money(verrechnet.getEffPreis()).multiply(z);
 				// double preis = (z * verrechnet.getEffPreisInRappen()) / 100.0;
-				sb.append(z).append(" ").append(verrechnet.getCode()).append(" ").append(
-					verrechnet.getText()).append(" (").append(preis.getAmountAsString())
+				sb.append(z).append(" ").append(verrechnet.getCode()).append(" ")
+					.append(verrechnet.getText()).append(" (").append(preis.getAmountAsString())
 					.append(")");
 				return sb.toString();
 			}
@@ -1532,7 +1573,7 @@
 		lDiagnosis.setLayoutData(SWTHelper.getFillGridData(1, true, 1, false));
 		
 		/* Implementation Drag&Drop */
-
+		
 		final TextTransfer textTransfer = TextTransfer.getInstance();
 		Transfer[] types = new Transfer[] {
 			textTransfer
@@ -1549,15 +1590,15 @@
 			
 			/* Mausbewegungen mit gedrückter Taste sind uns egal */
 			public void dragLeave(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOperationChanged(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOver(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			/* Erst das Loslassen interessiert uns wieder */
@@ -1577,7 +1618,7 @@
 			}
 			
 			public void dropAccept(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 		});
 		
@@ -1592,15 +1633,15 @@
 			
 			/* Mausbewegungen mit gedrückter Taste sind uns egal */
 			public void dragLeave(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOperationChanged(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			public void dragOver(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 			
 			/* Erst das Loslassen interessiert uns wieder */
@@ -1627,7 +1668,7 @@
 			}
 			
 			public void dropAccept(DropTargetEvent event){
-			/* leer */
+				/* leer */
 			}
 		});
 		
@@ -1706,8 +1747,8 @@
 	
 	@Override
 	public void setFocus(){
-	// TODO Auto-generated method stub
-	
+		// TODO Auto-generated method stub
+		
 	}
 	
 	private Problem getSelectedProblem(){
@@ -1819,8 +1860,8 @@
 	}
 	
 	public void adaptMenus(){
-		verrechnungViewer.getTable().getMenu().setEnabled(
-			Hub.acl.request(AccessControlDefaults.LSTG_VERRECHNEN));
+		verrechnungViewer.getTable().getMenu()
+			.setEnabled(Hub.acl.request(AccessControlDefaults.LSTG_VERRECHNEN));
 		
 		// TODO this belongs to GlobalActions itself (action creator)
 		GlobalActions.delKonsAction.setEnabled(Hub.acl.request(AccessControlDefaults.KONS_DELETE));
@@ -1892,7 +1933,7 @@
 				 * .setMessage("Neues Problem der aktuellen Konsulation zurdnen?"); if (mb.open() ==
 				 * SWT.YES) { problem.addToKonsultation(actKons); } }
 				 */
-
+				
 				problemsTableModel.reload();
 				problemsKTable.refresh();
 				
@@ -1919,6 +1960,8 @@
 				Point[] selection = problemsKTable.getCellSelection();
 				if (selection.length != 1) {
 					// no problem selected
+					SWTHelper.alert("Fixmedikation hinzufügen", "Sie können eine Fixmedikation nur dann hinzufügen," +
+					"wenn Sie in der entsprechenden Spalte der Patientenübersicht stehen.");
 					return;
 				}
 				
@@ -2147,6 +2190,8 @@
 		
 		exportToClipboardAction = new Action("Export (Zwischenablage)") {
 			{
+				setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin("ch.elexis",
+						"rsc/plaf/modern/icons/export.ico"));
 				setToolTipText("Zusammenfassung in Zwischenablage kopieren");
 			}
 			
@@ -2156,20 +2201,22 @@
 		};
 		exportToClipboardAction.setActionDefinitionId(EXPORT_CLIPBOARD_COMMAND);
 		GlobalActions.registerActionHandler(this, exportToClipboardAction);
-				
+		
 		sendEmailAction = new Action("E-Mail verschicken") {
 			{
+				setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin("ch.elexis",
+						"rsc/mail.png"));
 				setToolTipText("E-Mail Programm öffnent (mit Medikation und allen Konsultationen)");
 			}
 			
 			public void run(){
 				Email.openMailApplication("", // No default to address
-					null, "\n\n\n" + exportToClipboard(), null);
-
+					null, exportToClipboard(), null);
+				
 			}
 		};
 		sendEmailAction.setActionDefinitionId(EXPORT_SEND_EMAIL_COMMAND);
-//		GlobalActions.registerActionHandler(this, sendEmailAction);
+		GlobalActions.registerActionHandler(this, sendEmailAction);
 		
 		// history display
 		showAllChargesAction = new Action("Alle Leistungen anzeigen", Action.AS_CHECK_BOX) {
@@ -2485,7 +2532,7 @@
 			/*
 			 * history.stop(); history.load(null, true); history.start();
 			 */
-
+			
 			log.log("Patient: null", Log.DEBUGMSG);
 		}
 		
@@ -2493,7 +2540,7 @@
 			showAllConsultationsAction.isChecked());
 		
 		setPatientTitel();
-		setRemark();
+		setRemarkAndSticker();
 		setKontoText();
 	}
 	
@@ -2509,9 +2556,9 @@
 			VersionedResource vr = actKons.getEintrag();
 			ResourceItem entry = vr.getVersion(version);
 			StringBuilder sb = new StringBuilder();
-			sb.append("rev. ").append(version).append(" vom ").append(
-				new TimeTool(entry.timestamp).toString(TimeTool.FULL_GER)).append(" (").append(
-				entry.remark).append(")");
+			sb.append("rev. ").append(version).append(" vom ")
+				.append(new TimeTool(entry.timestamp).toString(TimeTool.FULL_GER)).append(" (")
+				.append(entry.remark).append(")");
 			lVersion.setText(sb.toString());
 		} else {
 			lVersion.setText("");
@@ -2526,9 +2573,9 @@
 				ResourceItem entry = vr.getVersion(version);
 				ntext = entry.data;
 				StringBuilder sb = new StringBuilder();
-				sb.append("rev. ").append(version).append(" vom ").append(
-					new TimeTool(entry.timestamp).toString(TimeTool.FULL_GER)).append(" (").append(
-					entry.remark).append(")");
+				sb.append("rev. ").append(version).append(" vom ")
+					.append(new TimeTool(entry.timestamp).toString(TimeTool.FULL_GER)).append(" (")
+					.append(entry.remark).append(")");
 				lVersion.setText(sb.toString());
 			} else {
 				lVersion.setText("");
@@ -2599,14 +2646,30 @@
 		formTitel.getParent().layout();
 	}
 	
-	private void setRemark(){
+	private void setRemarkAndSticker(){
 		String text = "";
+		sticker = Desk.getImage(Desk.IMG_MANN);
 		
 		if (actPatient != null) {
 			text = actPatient.getBemerkung();
+			ISticker et = actPatient.getSticker();
+			Image im = null;
+			if (et != null && (im = ((Sticker) et).getImage()) != null) {
+				sticker = im;
+			} else {
+				if (actPatient.getGeschlecht().equals(Person.MALE)) {
+					sticker = Desk.getImage(Desk.IMG_MANN);
+				} else {
+					sticker = Desk.getImage(Desk.IMG_FRAU);
+				}
+			}
 		}
 		
-		remarkLabel.setText(PersistentObject.checkNull(text));
+		stickerLabel.setImage(sticker);
+		if (PersistentObject.checkNull(text).length() == 0)
+			remarkLabel.setText("Bemerkungen");
+		else
+			remarkLabel.setText(PersistentObject.checkNull(text));
 		
 		formTitel.getParent().layout();
 	}
@@ -2817,7 +2880,7 @@
 		if (dialog.open() == Window.OK) {
 			String text = dialog.getValue();
 			actPatient.setBemerkung(text);
-			setRemark();
+			setRemarkAndSticker();
 		}
 	}
 	
@@ -2913,15 +2976,15 @@
 	private class ProblemsTableLabelProvider implements ITableLabelProvider, ITableFontProvider,
 			ITableColorProvider {
 		public void addListener(ILabelProviderListener listener){
-		// nothing to do
+			// nothing to do
 		}
 		
 		public void removeListener(ILabelProviderListener listener){
-		// nothing to do
+			// nothing to do
 		}
 		
 		public void dispose(){
-		// nothing to do
+			// nothing to do
 		}
 		
 		public Image getColumnImage(Object element, int columnIndex){
@@ -3337,8 +3400,8 @@
 		private final Hashtable<Integer, Integer> colWidths = new Hashtable<Integer, Integer>();
 		private final Hashtable<Integer, Integer> rowHeights = new Hashtable<Integer, Integer>();
 		
-		private final KTableCellRenderer fixedRenderer =
-			new FixedCellRenderer(FixedCellRenderer.STYLE_PUSH | FixedCellRenderer.INDICATION_SORT
+		private final KTableCellRenderer fixedRenderer = new FixedCellRenderer(
+			FixedCellRenderer.STYLE_PUSH | FixedCellRenderer.INDICATION_SORT
 				| FixedCellRenderer.INDICATION_FOCUS | FixedCellRenderer.INDICATION_CLICKED);
 		
 		private final KTableCellRenderer textRenderer = new ProblemsTableTextCellRenderer();
@@ -3690,7 +3753,10 @@
 		}
 		
 		public String getTooltipAt(int col, int row){
-			return "";
+			if (col < TOOLTIP_TEXT.length)
+				return TOOLTIP_TEXT[col];
+			else
+				return "Tooltip für col " + col;
 		}
 		
 		public boolean isColumnResizable(int col){
@@ -4634,8 +4700,8 @@
 					// lockValue.getTimestamp());
 					String lockstring = lockValue.getLockString();
 					StringBuilder sb = new StringBuilder();
-					sb.append("UPDATE CONFIG SET wert = ").append("'" + lockstring + "'").append(
-						" WHERE param = ").append(JdbcLink.wrap(key));
+					sb.append("UPDATE CONFIG SET wert = ").append("'" + lockstring + "'")
+						.append(" WHERE param = ").append(JdbcLink.wrap(key));
 					stm.exec(sb.toString());
 					return true;
 				}
